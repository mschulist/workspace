from manim import *
from manim_slides import Slide

class intro(Slide):
    def construct(self):
        title = Text("Metropolis Algorithm\nand\nMarkov Chain Monte Carlo")
        self.add(title)
        self.play(Write(title))
        self.next_slide()
        self.play(Unwrite(title))
        problem = Text("Imagine you are exploring an asteroid belt, but you can only see the adjacent asteriods.", font_size=16)
        self.add(problem)
        self.play(Write(problem))
        self.next_slide()
        self.play(problem.animate.to_edge(UP))
        specific_problem = Text("The number of days you spend on each asteroid must be proportional to the relative size of the asteroid.", font_size=16)
        self.add(specific_problem)
        self.play(Write(specific_problem))
        self.next_slide()
        self.play(specific_problem.animate.next_to(problem, DOWN))
        question = Text("We need to develop a method to explore our asteroids without being able to see all of them at once.", font_size=16).next_to(specific_problem, DOWN)
        self.add(question)
        self.play(Write(question))
        self.next_slide()
        self.play(Unwrite(problem), Unwrite(specific_problem), Unwrite(question))
        answer = Text("We can use the Metropolis Algorithm to explore our asteroid belt!", font_size=24)
        self.add(answer)
        self.play(Write(answer))
        self.next_slide()
        self.play(Unwrite(answer))
        rule1 = Text("Method: \n1. Start at a random asteroid.", font_size=24).to_edge(UP).to_edge(LEFT)
        rule2 = Text("2. Flip a fair coin p(Heads) = 0.5 to decide \nwhether to propose going clockwise or counterclockwise.", font_size=24).next_to(rule1, DOWN).to_edge(LEFT)
        rule3 = Text("3. If the proposal asteroid is larger, move to proposed asteroid. \nIf smaller, then flip a weighted coin with p(move) = proposal/current island size. ", font_size=24).next_to(rule2, DOWN).to_edge(LEFT)
        rule4 = Text("4. Repeat steps 2 and 3 and record the number of days spent on each asteroid.", font_size=24).next_to(rule3, DOWN).to_edge(LEFT)
        self.add(rule1)
        self.play(Write(rule1))
        self.next_slide()
        self.add(rule2)
        self.play(Write(rule2))
        self.next_slide()
        self.add(rule3)
        self.play(Write(rule3))
        self.next_slide()
        self.add(rule4)
        self.play(Write(rule4))
        self.next_slide()
        self.play(Unwrite(rule1), Unwrite(rule2), Unwrite(rule3), Unwrite(rule4))
        care = Text("So cool, but why should we care?", font_size=36)
        self.add(care)
        self.play(Write(care))
        self.next_slide()
        self.play(Unwrite(care))
        normal_dist = FunctionGraph(lambda x: np.exp(-x**2/2), x_range=[-3,3], color=BLUE).scale(2)
        self.add(normal_dist)
        self.play(Create(normal_dist), run_time=2)
        self.wait()
        dist_sub = Text("Normal (Gaussian) Distribution", font_size=24).next_to(normal_dist, DOWN)
        self.add(dist_sub)
        self.play(Write(dist_sub))
        self.next_slide()