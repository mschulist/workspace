from manim import *

class Cap_Discharge(Scene):
    def construct(self):
        t1 = MathTex("\\text{Discharge Equation: } V(t) = V_0 e^{- \\frac{t}{RC}}")
        t2 = MathTex("\\text{Logger Pro Natural Exponential Model: } A e^{-ct} + B").next_to(t1, DOWN)
        t3 = MathTex("-\\frac{t}{RC} = -ct").next_to(t2, DOWN)
        t4 = MathTex("-t = (RC)(-ct)").next_to(t3, DOWN)
        t5 = MathTex("1 = RcC").next_to(t4, DOWN)
        t6 = MathTex("\\frac{1}{c} = RC").next_to(t5, DOWN)
        self.add(t1)
        self.play(Create(t1), run_time=2)
        self.wait(5)
        self.add(t2)
        self.play(Create(t2), run_time=2)
        self.wait(3)
        # now explaining the parameters
        meaning = Text("What do these parameters mean?").next_to(t1, UP)
        self.add(meaning)
        self.play(Write(meaning), run_time=2)
        self.wait(3)
        self.play(Uncreate(meaning), run_time=2)
        current = Group(t1,t2)
        self.play(current.animate.to_edge(UP))
        self.wait(0.2)
        self.add(t3.next_to(t2, DOWN))
        self.play(Create(t3), run_time=2)
        self.wait()
        self.add(t4.next_to(t3, DOWN))
        self.play(Create(t4), run_time=2)
        self.wait()
        self.add(t5.next_to(t4, DOWN))
        self.play(Create(t5), run_time=2)
        self.wait(3)
        self.add(t6.next_to(t5, DOWN))
        self.play(Create(t6), run_time=2)
        self.wait(10)

class Cap_Charge(Scene):
    def construct(self):
        t1 = MathTex("\\text{Capacitor Charging: } V(t) = V_0 \\left(1 - e ^{-\\frac{t}{RC}} \\right)")
        self.add(t1)
        self.play(Create(t1), run_time=2)
        self.wait(3)
        self.play(t1.animate.to_edge(UP))
        self.wait(2)
        t2 = MathTex("\\text{Logger Pro Exponential Model: } A \\left(1-e^{-ct} \\right) + B")
        self.add(t2.next_to(t1, DOWN))
        self.play(Create(t2))
        self.wait(3)
        equal = MathTex("-ct = \\frac{t}{RC}")
        self.add(equal.next_to(t2, DOWN))
        self.play(Create(equal))
        self.wait(8)
        t3 = MathTex("\\frac{1}{c} = RC")
        self.add(equal.next_to(t2, DOWN))
        self.play(Create(t3))
        self.wait(8)

class log(Scene):
    def construct(self):
        t1 = MathTex("V(t) &= V_0 e^{-\\frac{t}{RC}}")
        t2 = MathTex("\\ln{\\left(V(t)\\right)} &= \\ln{\\left(V_0 e^{-\\frac{t}{RC}}\\right)}")
        t3 = MathTex("\\ln{\\left(V(t)\\right)} &= \\ln{V_0} + \\ln{\\left(e^{-\\frac{t}{RC}}\\right)}")
        t4 = MathTex("\\ln{\\left(V(t)\\right)} &= \\ln{V_0} - \\frac{t}{RC}")
        self.add(t1)
        self.play(Create(t1), run_time=2)
        self.wait(10)
        self.add(t2.next_to(t1, DOWN))
        self.play(Create(t2), run_time=2)
        self.wait()
        self.add(t3.next_to(t2, DOWN))
        self.play(Create(t3), run_time=2)
        self.wait(11)
        self.add(t4.next_to(t3, DOWN))
        self.play(Create(t4), run_time=2)
        self.wait()
        current = Group(t1, t2, t3, t4)
        self.play(current.animate.to_edge(UP))
        ending = MathTex("\\ln{\\left(V(t)\\right)} &= \\ln{V_0} - \\frac{1}{RC} \\cdot t")
        self.add(ending.next_to(t4, DOWN))
        self.play(Create(ending))
        self.wait(4)
        t5 = MathTex("\\text{Slope: } -\\frac{1}{RC}")
        t6 = Text("The slope is the reprocal\nof the time constant", font_size=36)
        self.add(t5.next_to(ending, DOWN))
        self.play(Create(t5), run_time=2)
        self.wait(4)
        current = Group(t1,t2,t3,t4,t5, ending)
        self.play(current.animate.to_edge(RIGHT))
        self.add(t6.next_to(t3, LEFT, buff=0.5))
        self.play(Write(t6), run_time=1.5)
        self.wait(5)